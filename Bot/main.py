from telebot import *
from telebot.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    InlineQuery,
)
from variables import *
from api import *
from chnnaelAccess import *

bot = TeleBot(token)
print("bot is running...")

'''
________________________________________________________________________________________________________________________
Inline keyboards
________________________________________________________________________________________________________________________
'''
subscribeUrlKb = InlineKeyboardMarkup(row_width=1)
subscribeUrlKb.add(InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=subscribeLink))

'''
________________________________________________________________________________________________________________________
Keyboards
________________________________________________________________________________________________________________________
'''
mainKb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
mainKb.add(KeyboardButton("–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"))
mainKb.add(KeyboardButton("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"))
mainKb.add(KeyboardButton("–ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç"))

'''
________________________________________________________________________________________________________________________
Local functions
________________________________________________________________________________________________________________________
'''

months = ["–Ø–Ω–≤–∞—Ä—è", "–§–µ–≤—Ä–∞–ª—è", "–ú–∞—Ä—Ç–∞", "–ê–ø—Ä–µ–ª—è", "–ú–∞—è", "–ò—é–Ω—è",
          "–ò—é–ª—è", "–ê–≤–≥—É—Å—Ç–∞", "–°–µ–Ω—Ç—è–±—Ä—è", "–û–∫—Ç—è–±—Ä—è", "–ù–æ—è–±–ª—è", "–î–µ–∫–∞–±—Ä—è"]


def statusMessage(uId: int):
    markup = InlineKeyboardMarkup(row_width=1)
    user = getUser(uId)

    if user.subscriptionStatus == "FIRST":
        messageText = "–¢—ã –µ—â–µ –Ω–µ –æ—Ñ–æ—Ä–º–ª—è–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–∏–∞–ª. ü§© –•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å 3 –¥–Ω—è –¥–æ—Å—Ç—É–ø–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ?"
        markup.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=subscribeLink))
    elif user.subscriptionStatus == "SECOND":
        if user.subscriptionEndDate > datetime.now():
            messageText = f"–¢–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–∏–∞–ª –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è ‚û° {user.subscriptionEndDate.day} " \
                          f"{months[user.subscriptionEndDate.month-1]} {user.subscriptionEndDate.year} –≥–æ–¥–∞"
            markup.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=subscribeLink))
        else:
            messageText = "üòé –¢—ã —É–∂–µ –ø—Ä–æ—à–µ–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–∏–∞–ª. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã, –ø–æ–¥–ø–∏—à–∏—Å—å"
            markup.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=subscribeLink))
            markup.add(InlineKeyboardButton(text="‚úç –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã", url=subscribeLink))
    elif user.subscriptionStatus == "THIRD":
        if user.subscriptionEndDate > datetime.now():
            messageText = f"–¢–≤–æ–π –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ ‚û° {user.subscriptionEndDate.day} " \
                          f"{months[user.subscriptionEndDate.month-1]} {user.subscriptionEndDate.year} –≥–æ–¥–∞"
        else:
            messageText = f"–¢–≤–æ–π –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫–æ–Ω—á–∏–ª–∞—Å—å ‚û° {user.subscriptionEndDate.day} " \
                          f"{months[user.subscriptionEndDate.month-1]} {user.subscriptionEndDate.year} –≥–æ–¥–∞"
            markup.add(InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=subscribeLink))

    else:
        messageText = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞"
        markup.add(InlineKeyboardButton(text="–û–±—Ä–∞—Ç–∏—Ç—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", url=adminLink))

    return messageText, markup


'''
________________________________________________________________________________________________________________________
Commands
________________________________________________________________________________________________________________________
'''


# @bot.message_handler(commands=['start'])
# def send_hi(message: Message):
#     print(message.chat.id, " - ", message.chat.first_name, " send /start")
#     bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç ‚úåÔ∏è ")


def onRegControl(message: Message):
    uId = message.chat.id
    user = getUser(uId)
    joinLink = generateJoinLink(message.from_user.username, uId)
    websiteUrlKb = InlineKeyboardMarkup(row_width=1)
    websiteUrlKb.add(InlineKeyboardButton(text="üîó–°–≤—è–∑–∞—Ç—å*", url=joinLink))
    if user.siteId is None:
        bot.send_message(uId,
                         "üîó –ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫ –∞–∫–∫–∞—É–Ω—Ç—É –Ω–∞ DataLouna.ru, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äú–°–≤—è–∑–∞—Ç—å‚Äù –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
                         ""
                         "–ü—Ä–∏–≤—è–∑–∫–∞ –¥–µ–ª–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑.",
                         reply_markup=websiteUrlKb)
        bot.register_next_step_handler(message, onRegControl)
    return


@bot.message_handler(commands=['start'])
def send_hi(message: Message):
    # print(message.chat.id, " - ", message.chat.first_name, " send /start")
    messageText = getMessageTexts(4)
    if messageText is None:
        bot.send_message(message.chat.id, '''–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.''')
    bot.send_message(message.chat.id, text=messageText, reply_markup=mainKb, parse_mode="Markdown")
    if getUser(message.chat.id) is None:
        createUser(message.chat.id)
    onRegControl(message)


@bot.message_handler(commands=['faq'])
def knowledgeBase(message: types.Message):
    user = getUser(message.chat.id)
    if user.subscriptionEndDate is None:
        bot.send_message(message.chat.id, text="–ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
                                               "–°–Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É.", reply_markup=subscribeUrlKb)
        return
    if user.subscriptionEndDate < datetime.now():
        bot.send_message(message.chat.id,
                         text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∏ —è –±–æ–ª—å—à–µ –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
                         reply_markup=subscribeUrlKb)
        return

    markup = InlineKeyboardMarkup()
    root = getArticle()
    # ---------------------------------------------------------------
    if root is None:
        print("__ ", message.chat.id)
        bot.send_message(message.from_user.id, "Error!!!")
        return
    # ---------------------------------------------------------------
    for i in root.childList:
        # ---------------------------------------------------------------
        if i is None:
            bot.send_message(message.from_user.id, "Error!!!")
            return
        markup.add(
            InlineKeyboardButton(
                text=i.title,
                callback_data="a" + chr(root.id)
                              + chr(i.id),
            )
        )  # parentId

    markup.add(
        InlineKeyboardButton(
            text="–ü–æ–∏—Å–∫",
            switch_inline_query_current_chat=""
        )
    )
    bot.send_message(message.from_user.id, root.title + "\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", reply_markup=markup)


'''
________________________________________________________________________________________________________________________
Inline buttons
________________________________________________________________________________________________________________________
'''


# @bot.callback_query_handler(func=lambda call: True)
# def callback_query(call: CallbackQuery):
#     markup = InlineKeyboardMarkup()
#     cbdata = call.data
#     if cbdata[0] == 'unseen':
#         bot.delete_message(call.message.chat.id, call.message.message_id)
# elif cbdata[0] == 'a':


@bot.callback_query_handler(func=lambda call: call.data[0] == 'a')
def articleCallback(call: CallbackQuery):
    user = getUser(call.message.chat.id)
    if user.subscriptionEndDate is None:
        bot.send_message(call.message.chat.id,
                         text="–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–∞–∫ —Ç—ã —Å—é–¥–∞ –ø–æ–ø–∞–ª. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª—É—á–∏–ª–∞—Å—å –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
                              "–°–Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É.", reply_markup=subscribeUrlKb)
        return
    if user.subscriptionEndDate < datetime.now():
        bot.send_message(call.message.chat.id,
                         text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∏ —è –±–æ–ª—å—à–µ –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
                         reply_markup=subscribeUrlKb)
        return

    markup = InlineKeyboardMarkup()
    cbdata = call.data[1:]
    article = getArticle(ord(cbdata[-1]))
    if len(cbdata) + 3 == 40:
        cbdata = cbdata[3:]
    # ---------------------------------------------------------------
    if article is None:
        print("__ ", call.message.chat.id)
        bot.send_message(call.from_user.id, "Error!!!")
        return
    bot.delete_message(call.message.chat.id, call.message.id)
    for i in article.childList:
        # ---------------------------------------------------------------
        if i is None:
            bot.send_message(call.message.chat.id, "Error!!!")
            return
        markup.add(
            InlineKeyboardButton(
                text=i.title,
                callback_data="a" + cbdata
                              + chr(i.id),
            )
        )  # parentId

    # markup.add(
    #             InlineKeyboardButton(
    #                 text="–ù–∞–∑–∞–¥",
    #                 callback_data="a" + cbdata[:-1]
    #             )
    #         )
    # markup.add(
    #             InlineKeyboardButton(
    #                 text="–ù–∞ –≥–ª–∞–≤–Ω—É—é",
    #                 callback_data="a" + chr(getArticle().id)
    #             )
    #         )
    if len(cbdata) == 2 and ord(cbdata[0]) != getArticle().id:
        markup.add(
            InlineKeyboardButton(
                text="–ù–∞ –≥–ª–∞–≤–Ω—É—é",
                callback_data="a" + chr(getArticle().id)
            )
        )
    elif len(cbdata) >= 2:
        markup.add(
            InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="a" + cbdata[:-1]
            )
        )  # parentId))
        markup.add(
            InlineKeyboardButton(
                text="–ù–∞ –≥–ª–∞–≤–Ω—É—é",
                callback_data="a" + chr(getArticle().id)
            )
        )
    if article.id == getArticle().id:
        markup.add(
            InlineKeyboardButton(
                text="–ü–æ–∏—Å–∫",
                switch_inline_query_current_chat=""
            )
        )
    # print(article.photoPath)
    messageText = f'*{article.title}*\n\n{article.text}'
    img = getPhoto(article.photoPath)
    # print(img)
    if img:
        bot.send_photo(
            call.message.chat.id,
            img,
            caption=messageText,
            reply_markup=markup,
            parse_mode="Markdown",
        )
    else:
        bot.send_message(
            call.message.chat.id,
            messageText,
            reply_markup=markup,
            parse_mode="Markdown",
        )


@bot.callback_query_handler(func=lambda call: call.data[0] == 'q')
def quizResponsesCatcher(call: CallbackQuery):
    codedAnswere = call.data + chr(call.message.chat.id)
    sendQuizAnswer(codedAnswere)


'''
________________________________________________________________________________________________________________________
Keyboard buttons
________________________________________________________________________________________________________________________
'''


@bot.message_handler(content_types=['text'])
def mainKeyboard(message: Message):
    if message.text == "–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏":
        user = getUser(message.chat.id)
        messageText, kbMarkup = statusMessage(user.chatId)
        bot.send_message(message.chat.id, text=messageText, reply_markup=kbMarkup)
    elif message.text == "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π":
        user = getUser(message.chat.id)
        if user.subscriptionEndDate is None:
            bot.send_message(message.chat.id,
                             text="–ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
                                  "–°–Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É.", reply_markup=subscribeUrlKb)
        elif user.subscriptionEndDate < datetime.now():
            bot.send_message(message.chat.id,
                             text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∏ —è –±–æ–ª—å—à–µ –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —ç—Ç—É "
                                  "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
                             reply_markup=subscribeUrlKb)
        else:
            knowledgeBase(message)

    elif message.text == "–ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç":
        user = getUser(message.chat.id)
        if user.subscriptionEndDate is None:
            bot.send_message(message.chat.id,
                             text="–í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –¥–æ—Å—Ç—É–ø.",
                             reply_markup=subscribeUrlKb)
        elif user.subscriptionEndDate < datetime.now():
            bot.send_message(message.chat.id,
                             text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∏ —Ç–≤–æ–π –¥–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç "
                                  "–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç.",
                             reply_markup=subscribeUrlKb)
        else:
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton(text="–ü–æ–ø–∞—Å—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç üòé", url=createInvteLink()))
            bot.send_message(message.chat.id, text="–í–æ—Ç —Ç–µ–±–µ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç", reply_markup=markup)


'''
________________________________________________________________________________________________________________________
Inline mode
________________________________________________________________________________________________________________________
'''


@bot.inline_handler(func=lambda query: len(query.query) > 0)
def inlineMode(data: InlineQuery):
    # print(data)
    # print(data.query)
    articles = getArticlesByKeyWord(data.query)
    # print(articles)
    if articles == None:
        return
    inlineQuery = []
    cnt = 1
    for article in articles:
        inlineQuery.append(
            types.InlineQueryResultArticle(
                id=str(cnt),
                title=article.title,
                input_message_content=articleToMessage(article),
                description=article.text[:30] + "...",
            )
        )
        cnt += 1
    bot.answer_inline_query(str(data.id), inlineQuery)


'''
________________________________________________________________________________________________________________________
Channel access
________________________________________________________________________________________________________________________
'''


@bot.chat_join_request_handler()
def joinChannelReques(request: types.ChatJoinRequest):
    # res = getAccess(request.chat.id)
    # print("avavavvavavvavavavva")
    # bot.approve_chat_join_request(chat_id=-1001821379673, user_id=354640082)
    uid = request.from_user.id
    res = getAccess(uid)
    print("chatJoinRequest")
    print(request)
    if res:

        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=createInvteLink()))
        bot.send_message(uid, text="–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª.", )
    else:
        bot.send_message(uid, text="–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –≤ –∫–∞–Ω–∞–ª. –û—Ñ–æ—Ä–º–∏—Ç–µ –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–∫–∏—Å–∫—É.",
                         reply_markup=subscribeUrlKb)


'''
________________________________________________________________________________________________________________________
Main access
________________________________________________________________________________________________________________________
'''

'''
________________________________________________________________________________________________________________________
Bot polling
________________________________________________________________________________________________________________________
'''

bot.infinity_polling()
