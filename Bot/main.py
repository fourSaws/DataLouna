from telebot import *
from telebot.types import (
    Message,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    InlineQuery,
)
from variables import *
from api import *
from chnnaelAccess import *

bot = TeleBot(token)
print("bot is running...")


'''
________________________________________________________________________________________________________________________
Inline keyboards
________________________________________________________________________________________________________________________
'''
websiteUrlKb = InlineKeyboardMarkup(row_width=1)
websiteUrlKb.add(InlineKeyboardButton(text="üîó–°–≤—è–∑–∞—Ç—å*", url=websiteLink))
subscribeUrlKb = InlineKeyboardMarkup(row_width=1)
subscribeUrlKb.add(InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=subscribeLink))

'''
________________________________________________________________________________________________________________________
Commands
________________________________________________________________________________________________________________________
'''

# @bot.message_handler(commands=['start'])
# def send_hi(message: Message):
#     print(message.chat.id, " - ", message.chat.first_name, " send /start")
#     bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç ‚úåÔ∏è ")



def onRegControl(message):
    uId = message.chat.id
    user = getUser(uId)
    if user.siteId is None:
        bot.send_message(uId,
                         "üîó –ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫ –∞–∫–∫–∞—É–Ω—Ç—É –Ω–∞ DataLouna.ru, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äú–°–≤—è–∑–∞—Ç—å‚Äù –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
                         ""
                         "–ü—Ä–∏–≤—è–∑–∫–∞ –¥–µ–ª–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑.",
                         reply_markup=websiteUrlKb)
        bot.register_next_step_handler(message, onRegControl)
    return



@bot.message_handler(commands=['start'])
def send_hi(message: Message):
    print(message.chat.id, " - ", message.chat.first_name, " send /start")
    bot.send_message(message.chat.id, '''üëã –ü—Ä–∏–≤–µ—Ç, —è ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–∞–±–æ—Ç–µ —Å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º DataLouna.ru. –í–æ—Ç, —á—Ç–æ –∂–¥–µ—Ç —Ç–µ–±—è –≤–Ω—É—Ç—Ä–∏:üß† –û–±—ä—è—Å–Ω–∏–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å DataLouna
    
üí≤ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–æ–º

üí∞ –ö–∞–∫ –Ω–µ —Ä–∞—Å—Ç–µ—Ä—è—Ç—å –≤—Å–µ –¥–µ–Ω—å–≥–∏ –∏ –ø—Ä–µ—É–º–Ω–æ–∂–∏—Ç—å –∏—Ö

üëÄ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∏—à–∫–∏ ‚Äî –≤ –±–æ—Ç–µ —Ä–∞–Ω—å—à–µ, —á–µ–º –Ω–∞ —Å–∞–π—Ç–µ

üéÅ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã

ü§î –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã

ü§ù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–µüòé –ó–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–± –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–∏–¥—è—Ç —Å–æ–∑–¥–∞—Ç–µ–ª–∏ DataLouna''')
    if getUser(message.chat.id) is None:
        createUser(message.chat.id)
    onRegControl(message)



@bot.message_handler(commands=['faq'])
def send_category(message: types.Message):
    markup = InlineKeyboardMarkup()
    root = getArticle()
    # ---------------------------------------------------------------
    if root is None:
        print("__ ", message.chat.id)
        bot.send_message(message.from_user.id, "Error!!!")
        return
    # ---------------------------------------------------------------
    for i in root.childList:
        # ---------------------------------------------------------------
        if i is None:
            bot.send_message(message.from_user.id, "Error!!!")
            return
        markup.add(
            InlineKeyboardButton(
                text=i.title,
                callback_data="a" + chr(root.id)
                              + chr(i.id),
            )
        )  # parentId
    bot.send_message(message.from_user.id, root.title + "\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", reply_markup=markup)

'''
________________________________________________________________________________________________________________________
Inline buttons
________________________________________________________________________________________________________________________
'''


# @bot.callback_query_handler(func=lambda call: True)
# def callback_query(call: CallbackQuery):
#     markup = InlineKeyboardMarkup()
#     cbdata = call.data
#     if cbdata[0] == 'unseen':
#         bot.delete_message(call.message.chat.id, call.message.message_id)
# elif cbdata[0] == 'a':


@bot.callback_query_handler(func=lambda call: call.data[0] == 'a')
def articleCallback(call: CallbackQuery):
    markup = InlineKeyboardMarkup()
    cbdata = call.data[1:]
    article = getArticle(ord(cbdata[-1]))
    if len(cbdata) + 1 == 40:
        cbdata = cbdata[1:]
    # ---------------------------------------------------------------
    if article is None:
        print("__ ", call.message.chat.id)
        bot.send_message(call.from_user.id, "Error!!!")
        return
    bot.delete_message(call.message.chat.id, call.message.id)
    for i in article.childList:
        # ---------------------------------------------------------------
        if i is None:
            bot.send_message(call.message.chat.id, "Error!!!")
            return
        markup.add(
            InlineKeyboardButton(
                text=i.title,
                callback_data="a" + cbdata
                              + chr(i.id),
            )
        )  # parentId
    if len(cbdata) == 2 and ord(cbdata[0]) != getArticle().id:
        markup.add(
            InlineKeyboardButton(
                text="–ù–∞ –≥–ª–∞–≤–Ω—É—é",
                callback_data="a"+chr(getArticle().id)
            )
        )
    elif len(cbdata) >= 2:
        markup.add(
            InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="a"+cbdata[:-1]
            )
        )  # parentId))
    # print(article.photoPath)
    messageText = f'*{article.title}*\n\n{article.text}'
    img = getPhoto(article.photoPath)
    # print(img)
    if img:
        bot.send_photo(
            call.message.chat.id,
            img,
            caption=messageText,
            reply_markup=markup,
            parse_mode="Markdown",
        )
    else:
        bot.send_message(
            call.message.chat.id,
            messageText,
            reply_markup=markup,
            parse_mode="Markdown",
        )

@bot.callback_query_handler(func=lambda call: call.data[0] == 'q')
def quizResponsesCatcher(call: CallbackQuery):
    codedAnswere = call.data + chr(call.message.chat.id)
    sendQuizAnswer(codedAnswere)




'''
________________________________________________________________________________________________________________________
Keyboard buttons
________________________________________________________________________________________________________________________
'''

'''
________________________________________________________________________________________________________________________
Inline mode
________________________________________________________________________________________________________________________
'''


@bot.inline_handler(func=lambda query: len(query.query) > 0)
def inlineMode(data: InlineQuery):
    print(data)
    print(data.query)
    articles = getArticlesByKeyWord(data.query)
    print(articles)
    if articles == None:
        return
    inlineQuery = []
    cnt = 1
    for article in articles:
        inlineQuery.append(
            types.InlineQueryResultArticle(
                id=str(cnt),
                title=article.title,
                input_message_content=articleToMessage(article),
                description=article.text[:30] + "...",
            )
        )
        cnt += 1
    bot.answer_inline_query(str(data.id), inlineQuery)




'''
________________________________________________________________________________________________________________________
Channel access
________________________________________________________________________________________________________________________
'''

@bot.chat_join_request_handler()
def joinChannelReques(request: types.ChatJoinRequest):
    # res = getAccess(request.chat.id)
    # print("avavavvavavvavavavva")
    # bot.approve_chat_join_request(chat_id=-1001821379673, user_id=354640082)
    res = True
    if res:
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=createInvteLink()))
        bot.send_message(request.chat.id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª.", )
    else:
        bot.send_message(request.chat.id, text="–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –≤ –∫–∞–Ω–∞–ª. –û—Ñ–æ—Ä–º–∏—Ç–µ –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–∫–∏—Å–∫—É.", reply_markup=subscribeUrlKb)


'''
________________________________________________________________________________________________________________________
Main access
________________________________________________________________________________________________________________________
'''



'''
________________________________________________________________________________________________________________________
Bot polling
________________________________________________________________________________________________________________________
'''

bot.infinity_polling()


